import itertools

def symdiff(a, b):
    # function takes in two vertices (perfect matchings represented as list of unordered pairs) and returns the symmetric difference of the two vertices
    temp = []
    temp1 = b[:]
    for i in a:
        temp1.remove(i) if i in temp1 else temp.append(i)
    for j in temp1:
        temp.append(j)
    return temp
def flip_graph(n):
    G = graphs.CompleteGraph(2*n)
    H = (PerfectMatchings(G).list())
    G1 = Graph()
    # whole intended graph
    for a,b in itertools.combinations(H,2):
        if len(symdiff(a,b))==4:
            G1.add_edge(a,b)
    return G1

G1 = flip_graph(5)

c =[4,3,2,1,2,0,2,3,4,1,0,5,4,5,0,0,4,5,3,1,4,5,0,3,2,4,1,3,1,5,5,2,0,4,0,1,0,3,4,3,5,2,2,3,1,4,0,3,1,5,0,3,0,5,4,2,3,1,4,2,3,2,1,5,1,3,1,2,4,3,4,5,5,0,4,4,1,0,0,2,1,5,3,0,4,5,3,3,4,5,5,3,1,1,5,3,3,2,4,1,4,2,5,2,4,0,4,1,5,3,4,1,2,0,0,4,1,3,2,5,4,2,0,0,5,3,3,4,1,1,2,0,5,4,3,1,0,2,5,2,0,2,0,5,5,1,3,3,2,4,2,4,0,3,1,5,1,5,3,3,4,0,2,5,3,0,1,3,1,3,0,3,4,2,0,2,4,1,4,2,2,3,4,4,5,2,0,1,5,2,3,0,5,2,4,1,5,2,2,1,0,5,4,1,3,5,4,1,4,3,1,5,0,3,1,5,0,4,1,3,1,4,1,4,3,0,4,5,1,3,0,4,0,5,0,4,1,2,0,4,5,1,4,3,0,5,1,3,0,3,0,2,0,4,1,4,0,1,1,5,2,3,0,5,2,5,1,5,3,2,1,5,4,5,0,1,4,5,0,1,0,5,3,2,4,4,0,3,0,3,5,1,4,2,4,2,3,2,4,1,0,3,1,1,0,3,3,2,4,1,4,2,0,2,4,5,1,2,1,3,0,2,5,4,5,0,3,4,3,1,1,5,4,2,4,1,5,1,3,2,3,4,0,1,3,2,4,3,5,3,0,3,5,1,0,2,5,1,3,0,3,1,4,4,0,1,1,2,4,4,1,0,3,0,5,4,0,1,0,2,4,3,4,2,5,2,3,2,4,1,3,1,0,1,0,3,0,2,4,3,4,2,1,3,5,2,0,4,3,2,5,4,3,1,5,2,4,2,5,0,0,3,5,2,5,4,1,2,0,2,3,1,0,5,3,2,0,3,0,1,2,3,0,1,4,5,0,5,2,4,3,5,1,2,0,3,5,4,0,2,0,4,0,4,2,5,2,0,0,5,4,4,3,5,0,4,3,2,1,0,0,5,2,4,1,3,1,5,0,2,1,5,5,2,3,1,0,4,3,4,1,4,1,2,1,0,4,3,5,0,4,3,1,2,1,3,0,5,4,2,3,5,5,0,3,5,2,4,4,0,3,0,1,4,1,0,2,5,3,4,1,5,0,2,4,5,4,5,0,3,1,4,2,4,0,4,0,5,5,2,0,3,1,2,5,2,1,4,1,3,0,5,1,3,0,2,2,4,0,1,0,4,3,4,2,1,0,3,5,3,1,4,0,3,5,2,0,0,1,4,4,2,0,2,5,3,3,2,5,0,5,1,1,0,3,0,5,3,1,2,5,2,0,1,3,4,2,0,3,5,4,3,5,0,5,2,5,3,1,4,1,3,0,5,1,0,4,1,4,1,0,1,4,3,0,3,1,5,1,3,1,2,0,2,0,5,5,3,1,3,5,2,1,3,5,5,4,3,1,2,4,0,1,5,5,4,0,2,0,4,0,1,4,2,0,3,3,5,0,2,0,1,5,4,2,5,4,2,1,2,5,4,3,1,1,4,3,0,3,1,4,3,0,0,5,1,1,4,2,4,1,0,3,5,2,0,4,1,5,1,0,2,4,3,3,0,5,4,1,2,1,2,5,2,0,3,0,3,5,5,1,2,1,3,5,2,3,4,3,1,2,4,5,0,2,0,3,5,1,0,0,2,5,4,5,3,5,2,1,0,1,2,4,3,1,5,0,2,3,2,5,1,0,4,3,4,0,0,2,4,4,3,0,0,1,4,5,4,0,0,1,5,3,4,0,2,5,1,4,0,3,0,2,4,2,0,1,5,3,4,2,1,4,4,0,1,1,5,2,2,3,0,0,5,1,4,5,0,3,4,5,5,1,3,0,5,1,2,1,3,0,2,5,4,3,1,1,0,4,4,1,2,0,3,5,2,1,0,5,0,4,4,1,0,5,4,3,3,2,4,3,2,5,0,1,2,5,2,3,0,3,5,4,1,0,5,1,3,1,3,0,0,1,4,5,4,1,1,3,4,1,3,5,5,1,2,2,0,5,0,3,4,4,1,3] # given coloring

for i in range(6):
    indices = [j for j, x in enumerate(c) if x == i] # extract indices corresponding to i
    independent_set = [G1.vertices()[k] for k in indices] # extract vertices with the index in indices
    print('Vertices corresponding to the '+str(i)+'-th color are independent: '+str(G1.is_independent_set(independent_set)))